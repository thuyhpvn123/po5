// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

import "forge-std/Test.sol";
import "../src/eStock.sol";
import "openzeppelin-contracts/token/ERC20/ERC20.sol";

contract MockUSDT is ERC20 {
    constructor() ERC20("Mock USDT", "USDT") {
        _mint(msg.sender, 1_000_000 * 1e6);
    }
}

contract eStockTest is Test {
    eStock public stock;
    MockUSDT public usdt;
    address public owner;
    address public user;

    function setUp() public {
        owner = address(this);
        user = address(0x123);
        usdt = new MockUSDT();
        stock = new eStock("eStock Token", "EST", 1_000_000 * 1e18, 1000000, address(usdt));
        
        usdt.transfer(user, 10_000 * 1e6);
    }

    function testSetExchangeRate() public {
        stock.setExchangeRate(1500000);
        assertEq(stock.getExchangeRate(), 1500000);
    }

    function testBuyStock() public {
        vm.startPrank(user);
        usdt.approve(address(stock), 100 * 1e6);
        stock.buyStock(100 * 1e6, 1000000);
        assertEq(stock.balanceOf(user), 100 * 1e18);
        vm.stopPrank();
    }

    function testReceiveProfit() public {
        vm.startPrank(user);
        usdt.approve(address(stock), 200 * 1e6);
        stock.receiveProfitFromContract(200 * 1e6);
        assertEq(stock.getUserUSDTCommission(user), 200 * 1e6);
        vm.stopPrank();
    }
    function testWithdrawUSDTCommission() public {
        vm.startPrank(user);
        usdt.approve(address(stock), 300 * 1e6);
        stock.receiveProfitFromContract(300 * 1e6);
        assertEq(stock.getUserUSDTCommission(user), 300 * 1e6);
        
        stock.withdrawUSDTCommission();
        assertEq(stock.getUserUSDTCommission(user), 0);
        assertEq(stock.getUserUSDTWithdrawn(user), 300 * 1e6);
        vm.stopPrank();
    }
}
