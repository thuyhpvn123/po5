{
	"compiler": {
		"version": "0.8.26+commit.8a97fa7a"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_ecomOrderAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_ecomUserAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_balanceManagerAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_showroomAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_eventLoggerAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_rootNodeAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_daoNodeAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_stockNodeAddress",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "_usdtAddress",
						"type": "address"
					}
				],
				"stateMutability": "nonpayable",
				"type": "constructor"
			},
			{
				"anonymous": false,
				"inputs": [
					{
						"indexed": true,
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"indexed": false,
						"internalType": "uint256",
						"name": "bp",
						"type": "uint256"
					}
				],
				"name": "BPChanged",
				"type": "event"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_timestamp",
						"type": "uint256"
					},
					{
						"internalType": "enum TreeCommission.TYPE_OF_COM",
						"name": "_comType",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "_amount",
						"type": "uint256"
					}
				],
				"name": "addCommission",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newMember",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "parent",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "longtitude",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lattitude",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "utxoID",
						"type": "bytes32"
					}
				],
				"name": "addPromoterMember",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newMember",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "parent",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "utxoID",
						"type": "bytes32"
					}
				],
				"name": "addVIPMember",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "balancesManager",
				"outputs": [
					{
						"internalType": "contract BalancesManager",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "banUser",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "orderCode",
						"type": "bytes32"
					},
					{
						"internalType": "bytes32",
						"name": "utxoID",
						"type": "bytes32"
					}
				],
				"name": "buyProduct",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "checkPromoter",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "dailyUpdateGenerationRank",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "distributeNationalBonus",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "eComOrderManagerAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "eComUserManagerAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getAddress",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint8",
						"name": "totalLevel",
						"type": "uint8"
					},
					{
						"internalType": "uint256",
						"name": "startIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "pageSize",
						"type": "uint256"
					}
				],
				"name": "getChildren",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					},
					{
						"components": [
							{
								"internalType": "address",
								"name": "parent",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "children",
								"type": "address[]"
							},
							{
								"internalType": "enum TreeLib.Rank",
								"name": "rank",
								"type": "uint8"
							},
							{
								"internalType": "enum TreeLib.Status",
								"name": "status",
								"type": "uint8"
							}
						],
						"internalType": "struct TreeLib.NodeInfo[]",
						"name": "",
						"type": "tuple[]"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "membershipExpiry",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "processedChildren",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "personalBP",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "teamBP",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "totalTeamBP",
								"type": "uint256"
							}
						],
						"internalType": "struct TreeLib.NodeData[]",
						"name": "",
						"type": "tuple[]"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "_startDate",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_endDate",
						"type": "uint256"
					},
					{
						"internalType": "enum TreeCommission.TYPE_OF_COM",
						"name": "_comType",
						"type": "uint8"
					}
				],
				"name": "getCommissionInRange",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "totalCommission",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getPromoterInfo",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "parent",
								"type": "address"
							},
							{
								"internalType": "address[]",
								"name": "children",
								"type": "address[]"
							},
							{
								"internalType": "enum TreeLib.Rank",
								"name": "rank",
								"type": "uint8"
							},
							{
								"internalType": "enum TreeLib.Status",
								"name": "status",
								"type": "uint8"
							}
						],
						"internalType": "struct TreeLib.NodeInfo",
						"name": "",
						"type": "tuple"
					},
					{
						"components": [
							{
								"internalType": "uint256",
								"name": "membershipExpiry",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "processedChildren",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "personalBP",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "teamBP",
								"type": "uint256"
							},
							{
								"internalType": "uint256",
								"name": "totalTeamBP",
								"type": "uint256"
							}
						],
						"internalType": "struct TreeLib.NodeData",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "getVIPInfo",
				"outputs": [
					{
						"components": [
							{
								"internalType": "address",
								"name": "parent",
								"type": "address"
							},
							{
								"internalType": "uint256",
								"name": "membershipExpiry",
								"type": "uint256"
							}
						],
						"internalType": "struct TreeCommission.VIPNode",
						"name": "",
						"type": "tuple"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "startIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "pageSize",
						"type": "uint256"
					}
				],
				"name": "getVIPMembers",
				"outputs": [
					{
						"internalType": "address[]",
						"name": "",
						"type": "address[]"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "hourlyBatchProcessing",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "isPromoterActive",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isVIP",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					}
				],
				"name": "isVIPOrPromoter",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					},
					{
						"internalType": "enum TreeCommission.TYPE_OF_COM",
						"name": "",
						"type": "uint8"
					}
				],
				"name": "mUserToDateToCom",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "startIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "batchSize",
						"type": "uint256"
					}
				],
				"name": "processTeamBPAndActive",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "nextIndex",
						"type": "uint256"
					}
				],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "bytes32",
						"name": "utxoID",
						"type": "bytes32"
					}
				],
				"name": "renewMembership",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "startIndex",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "batchSize",
						"type": "uint256"
					}
				],
				"name": "resetMonthlyData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "level",
						"type": "uint256"
					}
				],
				"name": "setAgentLevel",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_eComOrderManagerAddress",
						"type": "address"
					}
				],
				"name": "setEcomOrder",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_eComUserManagerAddress",
						"type": "address"
					}
				],
				"name": "setEcomUser",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bool",
						"name": "isLock",
						"type": "bool"
					}
				],
				"name": "setLockData",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "_usdtAddress",
						"type": "address"
					}
				],
				"name": "setUsdt",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newMember",
						"type": "address"
					}
				],
				"name": "testGetNodeParent",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "newMember",
						"type": "address"
					}
				],
				"name": "testGetUserParent",
				"outputs": [
					{
						"internalType": "address",
						"name": "",
						"type": "address"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "bytes32",
						"name": "orderCode",
						"type": "bytes32"
					}
				],
				"name": "updateDeliveryProduct",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "uint256",
						"name": "longtitude",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "lattitude",
						"type": "uint256"
					},
					{
						"internalType": "bytes32",
						"name": "utxoID",
						"type": "bytes32"
					}
				],
				"name": "upgradeToPromoter",
				"outputs": [],
				"stateMutability": "payable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "bytes32[]",
						"name": "utxoArr",
						"type": "bytes32[]"
					}
				],
				"name": "withdrawBP",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "amount",
						"type": "uint256"
					},
					{
						"internalType": "address",
						"name": "user",
						"type": "address"
					},
					{
						"internalType": "bytes32[]",
						"name": "utxoArr",
						"type": "bytes32[]"
					}
				],
				"name": "withdrawBPToAnotherUser",
				"outputs": [],
				"stateMutability": "nonpayable",
				"type": "function"
			}
		],
		"devdoc": {
			"details": "Hợp đồng thông minh MLM \"Power of 5\" triển khai kế hoạch thưởng với nhiều loại hoa hồng, quản lý thành viên và xử lý batch để tối ưu hóa gas.",
			"kind": "dev",
			"methods": {
				"addPromoterMember(address,address,uint256,uint256,bytes32)": {
					"details": "Thêm một thành viên Promoter mới vào hệ thống",
					"params": {
						"lattitude": "Vĩ độ vị trí thành viên mới",
						"longtitude": "Kinh độ vị trí thành viên mới",
						"newMember": "Địa chỉ thành viên mới",
						"parent": "Địa chỉ cha trực tiếp"
					}
				},
				"addVIPMember(address,address,bytes32)": {
					"details": "Thêm một VIP member vào hệ thống",
					"params": {
						"newMember": "Địa chỉ của thành viên mới",
						"parent": "Địa chỉ cha của thành viên"
					}
				},
				"getChildren(address,uint8,uint256,uint256)": {
					"details": "Lấy danh sách con trực tiếp của một user bao gồm cả con ảo, phân trang",
					"params": {
						"pageSize": "Số lượng trả về",
						"startIndex": "Vị trí bắt đầu",
						"user": "Địa chỉ thành viên cần lấy danh sách con"
					},
					"returns": {
						"_0": "Mảng địa chỉ con"
					}
				},
				"getVIPMembers(address,uint256,uint256)": {
					"details": "Lấy danh sách các thành viên VIP trực thuộc một node",
					"params": {
						"pageSize": "Số lượng VIP trả về trong một lần",
						"startIndex": "Vị trí bắt đầu trong danh sách",
						"user": "Địa chỉ của node (cha)"
					},
					"returns": {
						"_0": "Mảng chứa địa chỉ các VIP trực thuộc"
					}
				},
				"hourlyBatchProcessing()": {
					"details": "Xử lý batch mỗi giờ để cập nhật trạng thái và tính toán TeamBP - Khóa dữ liệu trong quá trình xử lý. - Cập nhật trạng thái Active cho các `newParents` (các cha có thành viên mới). - Phân phối hoa hồng Unilevel cho các `newParents`. - Cập nhật danh sách leafNodes. - Xử lý toàn bộ TeamBP bằng cách duyệt tất cả leafNodes theo batch. - Sau khi hoàn tất, mở khóa dữ liệu và xử lý các giao dịch chờ. - Reset danh sách `newParents` để chuẩn bị cho batch tiếp theo."
				},
				"processTeamBPAndActive(uint256,uint256)": {
					"details": "Xử lý TeamBP và trạng thái Active theo lô (batch) - Duyệt qua các leafNodes theo batch để tránh hết gas. - Cập nhật TeamBP và Active Status cho từng node lá, sau đó đệ quy lên các cấp cha. - Nếu node có phát sinh doanh số (nằm trong hourlySales hoặc hasSales),   sẽ gán cờ hasSales cho parent để đảm bảo cập nhật TeamBP từ node lá lên root. - Khi một parent đã xử lý hết tất cả node con, thực hiện updateTeamBP cho parent   và gọi đệ quy processParentRecursively để tiếp tục cập nhật cho các cấp cha cao hơn.",
					"params": {
						"batchSize": "Số lượng leafNodes xử lý trong một batch.",
						"startIndex": "Vị trí bắt đầu trong danh sách leafNodes."
					},
					"returns": {
						"nextIndex": "Vị trí tiếp theo để tiếp tục xử lý (hoặc 0 nếu xong)."
					}
				},
				"renewMembership(address,bytes32)": {
					"details": "Gia hạn Membership cho tài khoản Promoter",
					"params": {
						"user": "Địa chỉ thành viên cần gia hạn"
					}
				},
				"resetMonthlyData(uint256,uint256)": {
					"details": "Xử lý batch mỗi tháng để reset dữ liệu và cập nhật trạng thái Active - Chỉ được gọi sau khi đã chạy `hourlyBatchProcessing` để đảm bảo số liệu chính xác. - Duyệt qua tất cả các node trong hệ thống theo từng batch. - Kiểm tra điều kiện Active của từng user. - Nếu không đạt điều kiện, chuyển trạng thái về InActive. - Reset dữ liệu của tháng: số membership bán và BP sản phẩm.",
					"params": {
						"batchSize": "Số lượng node xử lý trong mỗi batch",
						"startIndex": "Vị trí bắt đầu trong danh sách allNodes"
					}
				},
				"setAgentLevel(address,uint256)": {
					"details": "Cập nhật cấp độ agent cho một người dùng",
					"params": {
						"level": "Cấp độ agent mới",
						"user": "Địa chỉ người dùng"
					}
				},
				"setLockData(bool)": {
					"details": "Khóa dữ liệu trong hệ thống - Không cho phép thêm mới, chỉnh sửa dữ liệu khi đang chạy batch. - Chỉ được thực thi nếu hệ thống khi batch không chạy"
				},
				"upgradeToPromoter(address,uint256,uint256,bytes32)": {
					"details": "Nâng cấp một tài khoản từ VIP lên Promoter",
					"params": {
						"lattitude": "Vĩ độ vị trí của thành viên",
						"longtitude": "Kinh độ vị trí của thành viên",
						"user": "Địa chỉ tài khoản VIP cần nâng cấp"
					}
				},
				"withdrawBP(uint256,bytes32[])": {
					"details": "Rút một lượng BP từ tài khoản người dùng.",
					"params": {
						"amount": "Số lượng BP cần rút."
					}
				}
			},
			"stateVariables": {
				"AGENT_FW_PERMILLE": {
					"details": "Giá trị phần nghìn cho hoa hồng của Agent (tính theo đơn vị phần nghìn)"
				}
			},
			"title": "TreeCommission",
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"src/po5.sol": "TreeCommission"
		},
		"evmVersion": "cancun",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": true,
			"runs": 0
		},
		"remappings": []
	},
	"sources": {
		"@openzeppelin/contracts/access/Ownable.sol": {
			"keccak256": "0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb",
			"license": "MIT",
			"urls": [
				"bzz-raw://8ed324d3920bb545059d66ab97d43e43ee85fd3bd52e03e401f020afb0b120f6",
				"dweb:/ipfs/QmfEckWLmZkDDcoWrkEvMWhms66xwTLff9DDhegYpvHo1a"
			]
		},
		"@openzeppelin/contracts/interfaces/draft-IERC6093.sol": {
			"keccak256": "0x880da465c203cec76b10d72dbd87c80f387df4102274f23eea1f9c9b0918792b",
			"license": "MIT",
			"urls": [
				"bzz-raw://399594cd8bb0143bc9e55e0f1d071d0d8c850a394fb7a319d50edd55d9ed822b",
				"dweb:/ipfs/QmbPZzgtT6LEm9CMqWfagQFwETbV1ztpECBB1DtQHrKiRz"
			]
		},
		"@openzeppelin/contracts/token/ERC20/ERC20.sol": {
			"keccak256": "0x6ef9389a2c07bc40d8a7ba48914724ab2c108fac391ce12314f01321813e6368",
			"license": "MIT",
			"urls": [
				"bzz-raw://b7a5cb39b1e6df68f4dd9a5e76e853d745a74ffb3dfd7df4ae4d2ace6992a171",
				"dweb:/ipfs/QmPbzKR19rdM8X3PLQjsmHRepUKhvoZnedSR63XyGtXZib"
			]
		},
		"@openzeppelin/contracts/token/ERC20/IERC20.sol": {
			"keccak256": "0xe06a3f08a987af6ad2e1c1e774405d4fe08f1694b67517438b467cecf0da0ef7",
			"license": "MIT",
			"urls": [
				"bzz-raw://df6f0c459663c9858b6cba2cda1d14a7d05a985bed6d2de72bd8e78c25ee79db",
				"dweb:/ipfs/QmeTTxZ7qVk9rjEv2R4CpCwdf8UMCcRqDNMvzNxHc3Fnn9"
			]
		},
		"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
			"keccak256": "0x70f2f713b13b7ce4610bcd0ac9fec0f3cc43693b043abcb8dc40a42a726eb330",
			"license": "MIT",
			"urls": [
				"bzz-raw://c13d13304ac79a83ab1c30168967d19e2203342ebbd6a9bbce4db7550522dcbf",
				"dweb:/ipfs/QmeN5jKMN2vw5bhacr6tkg78afbTTZUeaacNHqjWt4Ew1r"
			]
		},
		"@openzeppelin/contracts/utils/Context.sol": {
			"keccak256": "0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2",
			"license": "MIT",
			"urls": [
				"bzz-raw://6a708e8a5bdb1011c2c381c9a5cfd8a9a956d7d0a9dc1bd8bcdaf52f76ef2f12",
				"dweb:/ipfs/Qmax9WHBnVsZP46ZxEMNRQpLQnrdE4dK8LehML1Py8FowF"
			]
		},
		"@openzeppelin/contracts/utils/Panic.sol": {
			"keccak256": "0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a",
			"license": "MIT",
			"urls": [
				"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a",
				"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"
			]
		},
		"@openzeppelin/contracts/utils/Strings.sol": {
			"keccak256": "0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c",
			"license": "MIT",
			"urls": [
				"bzz-raw://13a51bc2b23827744dcf5bad10c69e72528cf015a6fe48c93632cdb2c0eb1251",
				"dweb:/ipfs/QmZwPA47Yqgje1qtkdEFEja8ntTahMStYzKf5q3JRnaR7d"
			]
		},
		"@openzeppelin/contracts/utils/math/Math.sol": {
			"keccak256": "0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea",
			"license": "MIT",
			"urls": [
				"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d",
				"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"
			]
		},
		"@openzeppelin/contracts/utils/math/SafeCast.sol": {
			"keccak256": "0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54",
			"license": "MIT",
			"urls": [
				"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8",
				"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"
			]
		},
		"@openzeppelin/contracts/utils/math/SignedMath.sol": {
			"keccak256": "0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3",
			"license": "MIT",
			"urls": [
				"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03",
				"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"
			]
		},
		"src/po5.sol": {
			"keccak256": "0x57c692885dc78f4e9e09f724fde2e6d0222ffb9cd78c2d0f18c234381c71f3aa",
			"license": "MIT",
			"urls": [
				"bzz-raw://ced64ea2617b089916d961a4628a2cc1a46c4f51bb158c13a4ba388e3b871b87",
				"dweb:/ipfs/QmVrE5hPQr7zGdicMEZ5FxsvddbvTFUYJ7UMoUm9oDdHVW"
			]
		}
	},
	"version": 1
}